#!/usr/bin/env python3
"""
Script para testar o isolamento de dados por user_id nos endpoints atualizados.
"""

import requests
import json
from datetime import datetime, date

# Configura√ß√£o da API
BASE_URL = "http://localhost:5000"
API_BASE = f"{BASE_URL}/api"

def test_user_isolation():
    """Testa se o isolamento de dados por user_id est√° funcionando corretamente."""
    
    print("üîç Testando isolamento de dados por user_id...")
    print("=" * 60)
    
    # Dados de teste para dois usu√°rios diferentes
    user1_credentials = {
        "email": "admin@example.com",
        "password": "admin123"
    }
    
    user2_credentials = {
        "email": "user2@example.com", 
        "password": "user123"
    }
    
    # Fun√ß√£o para fazer login e obter token
    def login_user(credentials):
        response = requests.post(f"{API_BASE}/auth/login", json=credentials)
        if response.status_code == 200:
            return response.json().get('access_token')
        else:
            print(f"‚ùå Erro no login: {response.status_code} - {response.text}")
            return None
    
    # Fun√ß√£o para criar headers com token
    def get_headers(token):
        return {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
    
    # Login dos usu√°rios
    print("1. Fazendo login dos usu√°rios...")
    token1 = login_user(user1_credentials)
    token2 = login_user(user2_credentials)
    
    if not token1:
        print("‚ùå N√£o foi poss√≠vel fazer login do usu√°rio 1")
        return
    
    if not token2:
        print("‚ùå N√£o foi poss√≠vel fazer login do usu√°rio 2")
        return
    
    print("‚úÖ Login realizado com sucesso para ambos os usu√°rios")
    
    # Headers para cada usu√°rio
    headers1 = get_headers(token1)
    headers2 = get_headers(token2)
    
    # Teste 1: Verificar per√≠odos mensais
    print("\n2. Testando isolamento de per√≠odos mensais...")
    
    response1 = requests.get(f"{API_BASE}/monthly-payments", headers=headers1)
    response2 = requests.get(f"{API_BASE}/monthly-payments", headers=headers2)
    
    if response1.status_code == 200 and response2.status_code == 200:
        data1 = response1.json()
        data2 = response2.json()
        
        # Verificar se a resposta tem a estrutura esperada (API retorna 'data' em vez de 'periods')
        periods1 = data1.get('data', []) if isinstance(data1, dict) else data1
        periods2 = data2.get('data', []) if isinstance(data2, dict) else data2
        
        print(f"   Usu√°rio 1: {len(periods1)} per√≠odos")
        print(f"   Usu√°rio 2: {len(periods2)} per√≠odos")
        
        # Verificar se n√£o h√° sobreposi√ß√£o de IDs
        if periods1 and periods2:
            try:
                # A estrutura da API retorna objetos com 'period' contendo o ID
                ids1 = {p['period']['id'] for p in periods1 if isinstance(p, dict) and 'period' in p and 'id' in p['period']}
                ids2 = {p['period']['id'] for p in periods2 if isinstance(p, dict) and 'period' in p and 'id' in p['period']}
                overlap = ids1.intersection(ids2)
                
                if overlap:
                    print(f"‚ùå PROBLEMA: Per√≠odos compartilhados entre usu√°rios: {overlap}")
                else:
                    print("‚úÖ Per√≠odos isolados corretamente")
            except Exception as e:
                print(f"‚ùå Erro inesperado: {e}")
                print(f"   Estrutura per√≠odo 1: {periods1[0] if periods1 else 'Vazio'}")
                print(f"   Estrutura per√≠odo 2: {periods2[0] if periods2 else 'Vazio'}")
        else:
            print("‚ÑπÔ∏è  Um ou ambos usu√°rios n√£o t√™m per√≠odos para comparar")
    else:
        print(f"‚ùå Erro ao buscar per√≠odos: User1={response1.status_code}, User2={response2.status_code}")
    
    # Teste 2: Verificar jogadores de um per√≠odo espec√≠fico
    print("\n3. Testando isolamento de jogadores em per√≠odos...")
    
    # Pegar o primeiro per√≠odo de cada usu√°rio (se existir)
    if response1.status_code == 200 and len(periods1) > 0:
        try:
            period1_id = periods1[0]['period']['id']
            
            # Usu√°rio 1 tenta acessar seus pr√≥prios jogadores
            response = requests.get(f"{API_BASE}/monthly-periods/{period1_id}/players", headers=headers1)
            if response.status_code == 200:
                print("‚úÖ Usu√°rio 1 consegue acessar jogadores do seu per√≠odo")
            else:
                print(f"‚ùå Usu√°rio 1 n√£o consegue acessar seus jogadores: {response.status_code}")
            
            # Usu√°rio 2 tenta acessar jogadores do per√≠odo do usu√°rio 1
            response = requests.get(f"{API_BASE}/monthly-periods/{period1_id}/players", headers=headers2)
            if response.status_code == 404:
                print("‚úÖ Usu√°rio 2 n√£o consegue acessar jogadores do per√≠odo do usu√°rio 1 (isolamento OK)")
            elif response.status_code == 200:
                print("‚ùå PROBLEMA: Usu√°rio 2 consegue acessar jogadores do per√≠odo do usu√°rio 1")
            else:
                print(f"‚ö†Ô∏è  Resposta inesperada: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            print(f"   Estrutura per√≠odo: {periods1[0] if periods1 else 'Vazio'}")
    else:
        print("‚ÑπÔ∏è  Usu√°rio 1 n√£o tem per√≠odos para testar")
    
    # Teste 3: Verificar jogadores casuais
    print("\n4. Testando isolamento de jogadores casuais...")
    
    if response1.status_code == 200 and len(periods1) > 0:
        period1_id = periods1[0]['period']['id']
        
        # Usu√°rio 1 tenta acessar seus pr√≥prios jogadores casuais
        response = requests.get(f"{API_BASE}/monthly-periods/{period1_id}/casual-players", headers=headers1)
        if response.status_code == 200:
            print("‚úÖ Usu√°rio 1 consegue acessar jogadores casuais do seu per√≠odo")
        else:
            print(f"‚ùå Usu√°rio 1 n√£o consegue acessar seus jogadores casuais: {response.status_code}")
        
        # Usu√°rio 2 tenta acessar jogadores casuais do per√≠odo do usu√°rio 1
        response = requests.get(f"{API_BASE}/monthly-periods/{period1_id}/casual-players", headers=headers2)
        if response.status_code == 404:
            print("‚úÖ Usu√°rio 2 n√£o consegue acessar jogadores casuais do per√≠odo do usu√°rio 1 (isolamento OK)")
        elif response.status_code == 200:
            print("‚ùå PROBLEMA: Usu√°rio 2 consegue acessar jogadores casuais do per√≠odo do usu√°rio 1")
        else:
            print(f"‚ö†Ô∏è  Resposta inesperada: {response.status_code}")
    else:
        print("‚ÑπÔ∏è  Usu√°rio 1 n√£o tem per√≠odos para testar")
    
    # Teste 4: Testar cria√ß√£o de jogador casual
    print("\n5. Testando cria√ß√£o de jogador casual com isolamento...")
    
    if response1.status_code == 200 and len(periods1) > 0:
        period1_id = periods1[0]['period']['id']
        
        # Dados do jogador casual
        casual_player_data = {
            "name": "Jogador Teste",
            "value": 50.0,
            "payment_status": "pending"
        }
        
        # Usu√°rio 1 cria jogador casual no seu per√≠odo
        response = requests.post(
            f"{API_BASE}/monthly-periods/{period1_id}/casual-players",
            headers=headers1,
            json=casual_player_data
        )
        
        if response.status_code == 201:
            print("‚úÖ Usu√°rio 1 consegue criar jogador casual no seu per√≠odo")
            casual_player_id = response.json().get('id')
        else:
            print(f"‚ùå Usu√°rio 1 n√£o consegue criar jogador casual: {response.status_code} - {response.text}")
            casual_player_id = None
        
        # Usu√°rio 2 tenta criar jogador casual no per√≠odo do usu√°rio 1
        response = requests.post(
            f"{API_BASE}/monthly-periods/{period1_id}/casual-players",
            headers=headers2,
            json=casual_player_data
        )
        
        if response.status_code == 404:
            print("‚úÖ Usu√°rio 2 n√£o consegue criar jogador casual no per√≠odo do usu√°rio 1 (isolamento OK)")
        elif response.status_code == 201:
            print("‚ùå PROBLEMA: Usu√°rio 2 consegue criar jogador casual no per√≠odo do usu√°rio 1")
        else:
            print(f"‚ö†Ô∏è  Resposta inesperada: {response.status_code}")
    else:
        print("‚ÑπÔ∏è  Usu√°rio 1 n√£o tem per√≠odos para testar")
    
    print("\n" + "=" * 60)
    print("üèÅ Teste de isolamento conclu√≠do!")

if __name__ == "__main__":
    try:
        test_user_isolation()
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor. Certifique-se de que o backend est√° rodando em http://localhost:5000")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")