"""add custom_monthly_fee to monthly_players

Revision ID: 32bca4f380be
Revises: 
Create Date: 2025-10-09 22:18:17.469603

"""
from alembic import op
import sqlalchemy as sa
import uuid
from datetime import datetime
try:
    from werkzeug.security import generate_password_hash
except Exception:
    generate_password_hash = None


# revision identifiers, used by Alembic.
revision = '32bca4f380be'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Antes de tornar user_id NOT NULL, garantir que linhas antigas tenham um usuário associado.
    conn = op.get_bind()

    # Tentar obter um usuário padrão existente; se não existir, criar um.
    admin_id = None
    res = conn.execute(sa.text("SELECT id FROM users WHERE username = :u"), {"u": "admin"}).fetchone()
    if res:
        admin_id = res[0]
    else:
        # Gerar um UUID para o usuário admin e criar com hash se possível
        admin_id = str(uuid.uuid4())
        password_hash = "admin123"
        if generate_password_hash is not None:
            try:
                password_hash = generate_password_hash("admin123")
            except Exception:
                pass
        conn.execute(sa.text(
            """
            INSERT INTO users (id, username, email, password_hash, is_active, created_at, updated_at)
            VALUES (:id, :username, :email, :password_hash, 1, :created_at, :updated_at)
            """
        ), {
            "id": admin_id,
            "username": "admin",
            "email": "admin@futebol.com",
            "password_hash": password_hash,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
        })

    # Preencher user_id nulo nas tabelas dependentes
    conn.execute(sa.text("UPDATE casual_players SET user_id = :uid WHERE user_id IS NULL"), {"uid": admin_id})
    conn.execute(sa.text("UPDATE monthly_players SET user_id = :uid WHERE user_id IS NULL"), {"uid": admin_id})

    # Agora aplicar NOT NULL e chaves estrangeiras
    with op.batch_alter_table('casual_players', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
        batch_op.create_foreign_key('fk_casual_players_user_id', 'users', ['user_id'], ['id'])

    with op.batch_alter_table('monthly_players', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
        batch_op.create_foreign_key('fk_monthly_players_user_id', 'users', ['user_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('monthly_players', schema=None) as batch_op:
        batch_op.drop_constraint('fk_monthly_players_user_id', type_='foreignkey')
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)

    with op.batch_alter_table('casual_players', schema=None) as batch_op:
        batch_op.drop_constraint('fk_casual_players_user_id', type_='foreignkey')
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)

    # ### end Alembic commands ###
