name: Deploy Sistema Futebol

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Normalize owner
        shell: bash
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV

      - name: 🐍 Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/sistema-futebol-backend:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/sistema-futebol-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ⚛️ Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PROD_API_URL || 'http://31.97.166.28:5001' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/sistema-futebol-frontend:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/sistema-futebol-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📡 Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          PROD_SECRET_KEY: ${{ secrets.PROD_SECRET_KEY }}
          PROD_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
          PROD_CORS_ORIGINS: ${{ secrets.PROD_CORS_ORIGINS }}
          PROD_API_URL: ${{ secrets.PROD_API_URL || 'http://31.97.166.28:5001' }}
        with:
          host: ${{ secrets.VPS_HOST }}
          port: 22
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: PROD_DATABASE_URL,PROD_SECRET_KEY,PROD_JWT_SECRET_KEY,PROD_CORS_ORIGINS,PROD_API_URL,GITHUB_REPOSITORY
          command_timeout: 30m
          script: |
            set -e
            echo "🚀 Deploy iniciado em $(date)"
            
            cd ~/sistema_futebol
            
            # Atualizar repositório
            if [ -d ".git" ]; then
              git fetch --all
              git reset --hard origin/main
            else
              git clone https://github.com/${GITHUB_REPOSITORY}.git .
            fi
            
            # Atualizar .env
            OWNER_LC=$(echo "${GITHUB_REPOSITORY%/*}" | tr '[:upper:]' '[:lower:]')
            cat > .env <<EOF
            DATABASE_URL=${PROD_DATABASE_URL}
            SECRET_KEY=${PROD_SECRET_KEY}
            JWT_SECRET_KEY=${PROD_JWT_SECRET_KEY}
            CORS_ORIGINS=${PROD_CORS_ORIGINS}
            IMAGE_NAMESPACE=ghcr.io/${OWNER_LC}
            NEXT_PUBLIC_API_URL=${PROD_API_URL}
            EOF
            
            # Deploy
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            
            # Aguardar e verificar
            echo "⏳ Aguardando containers iniciarem..."
            sleep 15
            
            echo "📊 Status dos containers:"
            docker compose -f docker-compose.prod.yml ps
            
            echo "🧪 Testando backend..."
            if curl -f http://localhost:5001/health; then
              echo "✅ Backend OK"
            else
              echo "⚠️ Backend não respondeu"
            fi
            
            echo "🧪 Testando frontend..."
            if curl -f http://localhost:8080; then
              echo "✅ Frontend OK"
            else
              echo "⚠️ Frontend não respondeu, verificando logs..."
              docker compose -f docker-compose.prod.yml logs --tail=20 frontend
            fi
            
            echo "🎉 Deploy concluído em $(date)"