name: Deploy Sistema Futebol

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ${{ github.repository_owner }}/sistema-futebol-backend
  IMAGE_FRONTEND: ${{ github.repository_owner }}/sistema-futebol-frontend

jobs:
  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔤 Normalize owner to lowercase for GHCR tags
        shell: bash
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "IMAGE_BACKEND=$OWNER_LC/sistema-futebol-backend" >> $GITHUB_ENV
          echo "IMAGE_FRONTEND=$OWNER_LC/sistema-futebol-frontend" >> $GITHUB_ENV

      - name: 🐍 Build & Push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ⚛️ Build & Push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=http://backend:5000
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📡 Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          PROD_SECRET_KEY: ${{ secrets.PROD_SECRET_KEY }}
          PROD_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
          PROD_CORS_ORIGINS: ${{ secrets.PROD_CORS_ORIGINS }}
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: GHCR_USER,GHCR_TOKEN,REGISTRY,OWNER_LC,PROD_DATABASE_URL,PROD_SECRET_KEY,PROD_JWT_SECRET_KEY,PROD_CORS_ORIGINS,GITHUB_REPOSITORY
          command_timeout: 30m
          script: |
            set -e

            # Criar diretório do projeto
            mkdir -p ~/TMS_FLASK_REACT
            cd ~/TMS_FLASK_REACT

            # Clone ou atualize repositório
            if [ -d ".git" ]; then
              echo "📂 Atualizando repositório..."
              git fetch --all
              git reset --hard origin/main
            else
              echo "📥 Clonando repositório..."
              git clone https://github.com/${GITHUB_REPOSITORY}.git .
            fi

            # Login no GHCR para pull
            echo "${GHCR_TOKEN}" | docker login ${REGISTRY} -u "${GHCR_USER}" --password-stdin

            # Criar/atualizar .env para o docker-compose
            cat > .env <<ENVFILE
            IMAGE_NAMESPACE=${REGISTRY}/${OWNER_LC}
            DATABASE_URL=${PROD_DATABASE_URL}
            SECRET_KEY=${PROD_SECRET_KEY}
            JWT_SECRET_KEY=${PROD_JWT_SECRET_KEY}
            CORS_ORIGINS=${PROD_CORS_ORIGINS}
            ENVFILE

            # Docker Compose
            docker compose pull
            docker compose down
            docker compose up -d

            # Aplicar migrações Alembic automaticamente no backend
            docker compose exec -T -e FLASK_APP=wsgi.py backend flask db upgrade